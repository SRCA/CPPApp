using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using CCPApp.Models;
using System.Xml;
using System.IO;
using Xamarin.Forms;
using CCPApp.iOS;

[assembly: Dependency(typeof(SaveInspection))]
namespace CCPApp.iOS
{
	public class SaveInspection : ISaveInspection
	{
		Inspection inspection;
		ChecklistModel checklist;
		public void ExportInspection(Inspection inspection, string filename)
		{
			this.inspection = inspection;
			checklist = inspection.Checklist;
			string fullPath = Path.Combine(new FileManage().GetPublicFolder(),filename);
			XmlTextWriter writer = new XmlTextWriter(fullPath, null);
			writer.Formatting = Formatting.Indented;
			writer.Indentation = 1;
			writer.IndentChar = '\t';
			writer.WriteStartDocument();

			writer.WriteComment(" Generated by the Checklist Compiler Program version " + System.Reflection.Assembly.GetExecutingAssembly().GetName().Version + " ");
			writer.WriteComment(" Safety Research Corporation of America - http://www.srca.net/ ");

			// start checklist
			writer.WriteStartElement("Checklist");
			writer.WriteAttributeString("Id", checklist.Id);
			writer.WriteAttributeString("Title", checklist.Title);
			writer.WriteAttributeString("Description", checklist.Description);

			writer.WriteAttributeString("ContactName", checklist.ContactName);
			writer.WriteAttributeString("ContactPosition", checklist.ContactPosition);
			writer.WriteAttributeString("ContactAddress", checklist.ContactAddress);
			writer.WriteAttributeString("ContactCityState", checklist.ContactCityState);
			writer.WriteAttributeString("ContactZip", checklist.ContactZip);

			writer.WriteAttributeString("ScoreThresholdCommendable", checklist.ScoreThresholdCommendable.ToString());
			writer.WriteAttributeString("ScoreThresholdSatisfactory", checklist.ScoreThresholdSatisfactory.ToString());
			writer.WriteAttributeString("UserInvert", checklist.UserInvert.ToString());

			//SaveSystemicDefCategories(writer); I don't actually know what this is.
			SaveSections(writer);
			//TODO also save the comments, scores, inspectors, remarks

			// end checklist
			writer.WriteEndDocument();
			writer.Close();
		}
		protected void SaveSections(XmlTextWriter writer)
		{
			List<SectionModel> Sections = checklist.Sections;
			// loop through each section
			for (int i = 0; i < Sections.Count; i++)
			{
				// start section element
				writer.WriteStartElement("Section");
				writer.WriteAttributeString("Label", Sections[i].Label);
				writer.WriteAttributeString("Title", Sections[i].Title);
				writer.WriteAttributeString("ShortTitle", Sections[i].ShortTitle);
				writer.WriteAttributeString("ScoringModel", Sections[i].ScoringModel);

				SaveSectionParts(writer, Sections[i]);
				//SaveSystemicDefs(writer, Sections[i]);
				SaveQuestions(writer, Sections[i].Questions);

				// end section element
				writer.WriteEndElement();
			}
		}
		protected void SaveSectionParts(XmlTextWriter writer, SectionModel section)
		{
			// loop through each part
			for (int i = 0; i < section.SectionParts.Count; i++)
			{
				// start section part element
				writer.WriteStartElement("Part");
				writer.WriteAttributeString("Label", section.SectionParts[i].Label);
				writer.WriteAttributeString("Description", section.SectionParts[i].Description);

				SaveQuestions(writer, section.SectionParts[i].Questions);

				// end section part element
				writer.WriteEndElement();
			}
		}
		protected void SaveQuestions(XmlTextWriter writer, List<Question> questions)
		{
			// loop through each question
			for (int i = 0; i < questions.Count; i++)
			{
				// start question element
				writer.WriteStartElement("Question");
				writer.WriteAttributeString("Number", questions[i].Number.ToString());
				writer.WriteAttributeString("Subqualifier", questions[i].Subqualifier);
				writer.WriteAttributeString("Critical", questions[i].Critical.ToString());
				writer.WriteAttributeString("CriticalApplication", questions[i].CriticalApplication);
				writer.WriteAttributeString("InvertScore", questions[i].InvertScore.ToString());
				writer.WriteAttributeString("Text", questions[i].Text);
				writer.WriteAttributeString("PrintedText", questions[i].PrintedText);
				writer.WriteAttributeString("OldText", questions[i].OldText);
				writer.WriteAttributeString("Updated", questions[i].Updated.ToString());
				writer.WriteAttributeString("HasSubItems", questions[i].HasSubItems.ToString());

				SaveReferences(writer, questions[i]);
				//SaveSystemicDefCategoryIndices(writer, questions[i]);

				// end question element
				writer.WriteEndElement();
			}
		}
		protected void SaveReferences(XmlTextWriter writer, Question question)
		{
			// loop through each reference
			for (int i = 0; i < question.References.Count; i++)
			{
				// start reference element
				writer.WriteStartElement("Reference");
				writer.WriteAttributeString("DocumentName", question.References[i].DocumentName);
				writer.WriteAttributeString("Bookmark", question.References[i].Bookmark);
				writer.WriteAttributeString("Description", question.References[i].Description);
				//writer.WriteAttributeString("Style", question.References[i].Style.ToString());

				// end reference element
				writer.WriteEndElement();
			}
		}
	}
}